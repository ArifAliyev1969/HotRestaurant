var path = require('path');
var fs = require('fs');
var csv = require('fast-csv');
var _ = require('lodash');

function makeNestedArray(data, options) {
  // options = {
  //   headers: Array of desired headers
  //   compact: Boolean (false)
  // }
  if (!data || data.length === 0) { return []; }
  if (data[0].toObject) {
    data = _.map(data, function(item) {
      return item.toObject({virtuals: true});
    });
  }

  var headers;
  if (options && options.headers && (options.compact === false || options.compact === undefined)) {
    headers = options.headers;
  } else {
    // compute 'all present fields'
    var allPresentFields = [];
    _.each(data, function(item) {
      allPresentFields = _.union(allPresentFields, _.keys(item));
    });
    if (options && options.headers) { // compact is assumed true here
      headers = _.intersection(allPresentFields, options.headers);
    } else { // no headers provided => use 'all present fields'
      headers = allPresentFields;
    }
  }

  var nestedArray = _.map(data, function(item) {
    return _.map(headers, function(prop) {
      return item.hasOwnProperty(prop) ? item[prop] : '';
    });
  });

  nestedArray.unshift(headers);
  return nestedArray;
}

module.exports = function(filename, data, options, cb) {
  // options used for .csv, .tsv and .txt writing is an optional argument
  // options = {
  //   headers: Array of desired headers or String in ["all", "LS", "mongo", "mongoPlus"]
  //   compact: Boolean (true)
  // }
  if (cb === undefined) {
    cb = options;
    options = undefined;
  }

  var extension = path.extname(filename);
  var nestedArray;
  if (extension === '.json' || extension === '.log') {
    fs.writeFile(filename, JSON.stringify(data, null, 2), cb);

  } else if (extension === '.csv') {
    nestedArray = makeNestedArray(data, options);
    csv.writeToPath(filename, nestedArray, {headers: true}).on('finish', cb);

  } else if (extension === '.tsv' || extension === '.txt') {
    nestedArray = makeNestedArray(data, options);
    csv.writeToPath(filename, nestedArray, {headers: true, delimiter: '\t'}).on('finish', cb);

  } else {
    cb(new TypeError('Extension of ' + extension + ' is not recognized.'));
  }
};
